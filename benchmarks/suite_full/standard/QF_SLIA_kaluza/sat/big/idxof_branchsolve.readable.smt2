(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_2 () Int)
(declare-fun I0_5 () Int)
(declare-fun I0_7 () Int)
(declare-fun I1_5 () Int)
(declare-fun I2_5 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun PCTEMP_LHS_2 () String)
(declare-fun PCTEMP_LHS_3 () Int)
(declare-fun T0_2 () String)
(declare-fun T0_7 () String)
(declare-fun T1_2 () String)
(declare-fun T1_5 () String)
(declare-fun T1_7 () String)
(declare-fun T2_2 () String)
(declare-fun T2_5 () String)
(declare-fun T2_7 () String)
(declare-fun T3_2 () String)
(declare-fun T3_5 () String)
(declare-fun T3_7 () String)
(declare-fun T4_2 () String)
(declare-fun T4_7 () String)
(declare-fun T5_2 () String)
(declare-fun T5_7 () String)
(declare-fun T_2 () Int)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () Bool)
(declare-fun T_8 () Bool)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_SELECT_2 () Bool)
(declare-fun var_0xINPUT_8 () String)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_2 0)) (= var_0xINPUT_8 (str.++ T0_2 T1_2)) (= I0_2 (str.len T4_2)) (= 0 (str.len T0_2)) (= T1_2 (str.++ T2_2 T3_2)) (= T2_2 (str.++ T4_2 T5_2)) (= T5_2 "=") (not (str.in_re T4_2 (str.to_re "=")))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_8 (str.++ T0_2 T1_2)) (= 0 (str.len T0_2)) (not (str.in_re T1_2 (str.to_re "="))))))
(assert (= T_2 (+ PCTEMP_LHS_1 1)))
(assert (= I0_5 (- I2_5 T_2)))
(assert (>= T_2 0))
(assert (>= I2_5 T_2))
(assert (<= I2_5 I1_5))
(assert (= I2_5 I1_5))
(assert (= I0_5 (str.len PCTEMP_LHS_2)))
(assert (= var_0xINPUT_8 (str.++ T1_5 T2_5)))
(assert (= T2_5 (str.++ PCTEMP_LHS_2 T3_5)))
(assert (= T_2 (str.len T1_5)))
(assert (= I1_5 (str.len var_0xINPUT_8)))
(assert (= T_SELECT_2 (not (= PCTEMP_LHS_3 (- 1)))))
(assert (ite T_SELECT_2 (and (= PCTEMP_LHS_3 (+ I0_7 0)) (= PCTEMP_LHS_2 (str.++ T0_7 T1_7)) (= I0_7 (str.len T4_7)) (= 0 (str.len T0_7)) (= T1_7 (str.++ T2_7 T3_7)) (= T2_7 (str.++ T4_7 T5_7)) (= T5_7 "X") (not (str.in_re T4_7 (str.to_re "X")))) (and (= PCTEMP_LHS_3 (- 1)) (= PCTEMP_LHS_2 (str.++ T0_7 T1_7)) (= 0 (str.len T0_7)) (not (str.in_re T1_7 (str.to_re "X"))))))
(assert (= T_5 (< PCTEMP_LHS_3 0)))
(assert T_5)
(assert (= T_6 (= PCTEMP_LHS_2 "onmouseover")))
(assert (= T_7 (not T_6)))
(assert T_7)
(assert (= T_8 (not (= PCTEMP_LHS_2 "onmouseover"))))
(assert T_8)
(check-sat)

