(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_3 () Int)
(declare-fun I0_7 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun PCTEMP_LHS_2 () Int)
(declare-fun T0_3 () String)
(declare-fun T0_7 () String)
(declare-fun T1_3 () String)
(declare-fun T1_7 () String)
(declare-fun T2_3 () String)
(declare-fun T2_7 () String)
(declare-fun T3_3 () String)
(declare-fun T3_7 () String)
(declare-fun T4_3 () String)
(declare-fun T4_7 () String)
(declare-fun T5_3 () String)
(declare-fun T5_7 () String)
(declare-fun T_1 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () Bool)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_SELECT_2 () Bool)
(declare-fun var_0xINPUT_1380 () String)
(assert (= T_1 (not (= "" var_0xINPUT_1380))))
(assert T_1)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_3 0)) (= var_0xINPUT_1380 (str.++ T0_3 T1_3)) (= I0_3 (str.len T4_3)) (= 0 (str.len T0_3)) (= T1_3 (str.++ T2_3 T3_3)) (= T2_3 (str.++ T4_3 T5_3)) (= T5_3 "?") (not (str.in_re T4_3 (str.to_re "?")))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_1380 (str.++ T0_3 T1_3)) (= 0 (str.len T0_3)) (not (str.in_re T1_3 (str.to_re "?"))))))
(assert (= T_3 (= PCTEMP_LHS_1 (- 1))))
(assert (= T_4 (not T_3)))
(assert T_4)
(assert (= T_SELECT_2 (not (= PCTEMP_LHS_2 (- 1)))))
(assert (ite T_SELECT_2 (and (= PCTEMP_LHS_2 (+ I0_7 0)) (= var_0xINPUT_1380 (str.++ T0_7 T1_7)) (= I0_7 (str.len T4_7)) (= 0 (str.len T0_7)) (= T1_7 (str.++ T2_7 T3_7)) (= T2_7 (str.++ T4_7 T5_7)) (= T5_7 "#") (not (str.in_re T4_7 (str.to_re "#")))) (and (= PCTEMP_LHS_2 (- 1)) (= var_0xINPUT_1380 (str.++ T0_7 T1_7)) (= 0 (str.len T0_7)) (not (str.in_re T1_7 (str.to_re "#"))))))
(assert (= T_6 (= PCTEMP_LHS_2 (- 1))))
(assert (= T_7 (not T_6)))
(assert T_7)
(check-sat)

