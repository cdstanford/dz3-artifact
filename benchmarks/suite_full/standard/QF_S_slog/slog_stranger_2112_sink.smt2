(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_9 () String)
(declare-fun x_8 () String)
(declare-fun epsilon () String)
(declare-fun literal_7 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_14 () String)
(declare-fun x_17 () String)
(declare-fun literal_11 () String)
(declare-fun x_21 () String)
(declare-fun literal_23 () String)
(declare-fun x_25 () String)
(declare-fun x_26 () String)
(declare-fun literal_20 () String)
(declare-fun x_28 () String)
(declare-fun literal_30 () String)
(declare-fun x_31 () String)
(declare-fun literal_34 () String)
(declare-fun x_35 () String)
(declare-fun literal_33 () String)
(declare-fun x_36 () String)
(declare-fun literal_37 () String)
(declare-fun x_38 () String)
(declare-fun literal_39 () String)
(declare-fun x_40 () String)
(assert (= literal_9 "\u{66}\u{72}\u{6f}\u{6d}\u{3d}\u{6d}\u{6f}\u{6e}\u{74}\u{68}\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{63}\u{61}\u{6c}\u{5f}\u{64}\u{3d}"))
(assert (= epsilon ""))
(assert (= literal_7 "\u{63}\u{61}\u{6c}\u{5f}\u{64}"))
(assert (or (= x_8 epsilon) (= x_8 literal_7)))
(assert (= x_12 (str.++ literal_9 x_8)))
(assert (= literal_13 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{63}\u{61}\u{6c}\u{5f}\u{6d}\u{3d}"))
(assert (= x_14 (str.++ x_12 literal_13)))
(assert (= literal_11 "\u{63}\u{61}\u{6c}\u{5f}\u{6d}"))
(assert (or (= x_17 epsilon) (= x_17 literal_11)))
(assert (= x_21 (str.++ x_14 x_17)))
(assert (= literal_23 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{63}\u{61}\u{6c}\u{5f}\u{79}\u{3d}"))
(assert (= x_25 (str.++ x_21 literal_23)))
(assert (= literal_20 "\u{63}\u{61}\u{6c}\u{5f}\u{79}"))
(assert (or (= x_26 epsilon) (= x_26 literal_20)))
(assert (= x_28 (str.++ x_25 x_26)))
(assert (= literal_30 "\u{68}\u{69}\u{64}\u{64}\u{65}\u{6e}\u{20}\u{28}\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{22}\u{2f}\u{63}\u{61}\u{6c}\u{65}\u{6e}\u{64}\u{61}\u{72}\u{2f}\u{73}\u{65}\u{74}\u{2e}\u{70}\u{68}\u{70}\u{3f}\u{76}\u{61}\u{72}\u{3d}\u{73}\u{68}\u{6f}\u{77}\u{67}\u{72}\u{6f}\u{75}\u{70}\u{73}\u{26}\u{61}\u{6d}\u{70}\u{3b}"))
(assert (= x_31 (str.++ literal_30 x_28)))
(assert (= literal_34 "\u{22}\u{3e}"))
(assert (= x_35 (str.++ x_31 literal_34)))
(assert (= literal_33 "\u{63}\u{6c}\u{69}\u{63}\u{6b}\u{73}\u{68}\u{6f}\u{77}"))
(assert (= x_36 (str.++ x_35 literal_33)))
(assert (= literal_37 "\u{3c}\u{2f}\u{61}\u{3e}\u{29}\u{3c}\u{2f}\u{74}\u{64}\u{3e}"))
(assert (= x_38 (str.++ x_36 literal_37)))
(assert (= literal_39 "\u{5c}\u{6e}"))
(assert (= x_40 (str.++ x_38 literal_39)))
(assert (str.in_re x_40 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
