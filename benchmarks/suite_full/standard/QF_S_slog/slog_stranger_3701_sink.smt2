(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_14 () String)
(declare-fun literal_13 () String)
(declare-fun x_15 () String)
(declare-fun literal_16 () String)
(declare-fun x_17 () String)
(declare-fun x_18 () String)
(declare-fun x_19 () String)
(declare-fun literal_20 () String)
(declare-fun x_21 () String)
(declare-fun x_22 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(assert (= literal_12 "\u{3c}\u{2f}\u{74}\u{72}\u{3e}\u{5c}\u{6e}\u{3c}\u{74}\u{72}\u{3e}\u{5c}\u{6e}\u{3c}\u{74}\u{64}\u{20}\u{61}\u{6c}\u{69}\u{67}\u{6e}\u{3d}\u{27}\u{63}\u{65}\u{6e}\u{74}\u{65}\u{72}\u{27}\u{20}\u{63}\u{6f}\u{6c}\u{73}\u{70}\u{61}\u{6e}\u{3d}\u{27}"))
(assert (= x_14 (str.++ literal_12 sigmaStar_1)))
(assert (= literal_13 "\u{3f}\u{61}\u{69}\u{64}\u{3d}"))
(assert (= x_15 (str.++ literal_13 sigmaStar_11)))
(assert (= literal_16 "\u{27}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{27}\u{74}\u{62}\u{6c}\u{32}\u{27}\u{3e}\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{27}\u{70}\u{68}\u{6f}\u{74}\u{6f}\u{61}\u{6c}\u{62}\u{75}\u{6d}\u{73}\u{2e}\u{70}\u{68}\u{70}"))
(assert (= x_17 (str.++ x_14 literal_16)))
(assert (or (= x_18 sigmaStar_0) (= x_18 x_15)))
(assert (= x_19 (str.++ x_17 x_18)))
(assert (= literal_20 "\u{27}\u{3e}"))
(assert (= x_21 (str.++ x_19 literal_20)))
(assert (= x_22 (str.++ x_21 sigmaStar_2)))
(assert (= literal_23 "\u{3c}\u{2f}\u{61}\u{3e}\u{3c}\u{2f}\u{74}\u{64}\u{3e}\u{5c}\u{6e}\u{3c}\u{2f}\u{74}\u{72}\u{3e}\u{5c}\u{6e}\u{3c}\u{2f}\u{74}\u{61}\u{62}\u{6c}\u{65}\u{3e}\u{5c}\u{6e}"))
(assert (= x_24 (str.++ x_22 literal_23)))
(assert (str.in_re x_24 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
