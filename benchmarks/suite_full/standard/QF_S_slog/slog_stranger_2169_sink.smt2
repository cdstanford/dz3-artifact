(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun literal_21 () String)
(declare-fun x_17 () String)
(declare-fun literal_13 () String)
(declare-fun x_25 () String)
(declare-fun literal_26 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_29 () String)
(declare-fun x_30 () String)
(declare-fun epsilon () String)
(declare-fun literal_23 () String)
(declare-fun x_31 () String)
(declare-fun literal_32 () String)
(declare-fun x_33 () String)
(assert (= literal_21 "\u{3c}\u{64}\u{69}\u{76}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{22}\u{6d}\u{65}\u{73}\u{73}\u{61}\u{67}\u{65}\u{20}\u{6d}\u{65}\u{22}\u{3e}\u{3c}\u{61}\u{20}\u{6e}\u{61}\u{6d}\u{65}\u{3d}\u{22}\u{6d}\u{22}\u{3e}\u{3c}\u{2f}\u{61}\u{3e}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{22}\u{61}\u{75}\u{74}\u{68}\u{6f}\u{72}\u{22}\u{3e}"))
(assert (= literal_13 "\u{75}\u{73}\u{65}\u{72}"))
(assert (or (= x_17 sigmaStar_2) (= x_17 literal_13)))
(assert (= x_25 (str.++ literal_21 x_17)))
(assert (= literal_26 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{22}\u{74}\u{69}\u{6d}\u{65}\u{22}\u{3e}\u{5b}"))
(assert (= x_27 (str.++ x_25 literal_26)))
(assert (= literal_28 "\u{5d}\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3a}\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{22}\u{63}\u{6f}\u{6e}\u{74}\u{65}\u{6e}\u{74}\u{22}\u{3e}"))
(assert (= x_29 (str.++ x_27 literal_28)))
(assert (= epsilon ""))
(assert (= literal_23 "\u{73}\u{65}\u{61}\u{72}\u{63}\u{68}"))
(assert (or (= x_30 epsilon) (= x_30 literal_23)))
(assert (= x_31 (str.++ x_29 x_30)))
(assert (= literal_32 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{2f}\u{64}\u{69}\u{76}\u{3e}"))
(assert (= x_33 (str.++ x_31 literal_32)))
(assert (str.in_re x_33 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
