(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun x_8 () String)
(declare-fun literal_6 () String)
(declare-fun x_4 () String)
(declare-fun x_7 () String)
(declare-fun literal_5 () String)
(declare-fun x_11 () String)
(declare-fun x_10 () String)
(declare-fun literal_9 () String)
(declare-fun x_15 () String)
(declare-fun x_14 () String)
(declare-fun literal_13 () String)
(declare-fun x_17 () String)
(declare-fun x_16 () String)
(declare-fun epsilon () String)
(declare-fun x_19 () String)
(declare-fun sigmaStar_20 () String)
(declare-fun literal_21 () String)
(declare-fun x_22 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_25 () String)
(declare-fun x_26 () String)
(declare-fun sigmaStar_29 () String)
(assert (= x_4 (str.replace sigmaStar_0 "\u{2f}\u{5b}\u{5e}\u{30}\u{2d}\u{39}\u{61}\u{2d}\u{7a}\u{5c}\u{2d}\u{5f}\u{2c}\u{5d}\u{2b}\u{2f}\u{69}" "")))
(assert (= literal_6 ""))
(assert (or (= x_8 literal_6) (= x_8 x_4)))
(assert (= literal_5 ""))
(assert (or (= x_7 x_4) (= x_7 literal_5)))
(assert (= x_11 (str.++ x_8 x_7)))
(assert (= literal_9 ""))
(assert (or (= x_10 literal_9) (= x_10 x_4)))
(assert (= x_15 (str.++ x_11 x_10)))
(assert (= literal_13 "\u{65}\u{6e}"))
(assert (or (= x_14 x_4) (= x_14 literal_13)))
(assert (= x_17 (str.++ x_15 x_14)))
(assert (= epsilon ""))
(assert (or (= x_16 epsilon) (= x_16 x_4)))
(assert (= x_19 (str.++ x_17 x_16)))
(assert (= literal_21 "\u{2f}"))
(assert (= x_22 (str.++ sigmaStar_20 literal_21)))
(assert (= literal_23 "\u{74}\u{69}\u{6e}\u{79}\u{6d}\u{63}\u{65}\u{5f}"))
(assert (= x_24 (str.++ x_22 literal_23)))
(assert (= literal_25 "\u{2e}\u{67}\u{7a}"))
(assert (= x_26 (str.++ x_24 literal_25)))
(assert (str.in_re sigmaStar_29 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
