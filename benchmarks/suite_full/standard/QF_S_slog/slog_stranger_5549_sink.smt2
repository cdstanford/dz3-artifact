(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun literal_4 () String)
(declare-fun x_3 () String)
(declare-fun literal_1 () String)
(declare-fun x_10 () String)
(declare-fun x_25 () String)
(declare-fun literal_20 () String)
(declare-fun literal_19 () String)
(declare-fun literal_15 () String)
(declare-fun literal_17 () String)
(declare-fun literal_18 () String)
(declare-fun literal_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_33 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(assert (= literal_4 "\u{5f}"))
(assert (= literal_1 ""))
(assert (or (= x_3 sigmaStar_0) (= x_3 literal_1)))
(assert (= x_10 (str.++ literal_4 x_3)))
(assert (= literal_20 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{66}\u{6f}\u{75}\u{6e}\u{64}\u{70}\u{61}\u{73}\u{73}\u{77}\u{64}"))
(assert (= literal_19 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{66}\u{69}\u{6e}\u{61}\u{6c}"))
(assert (= literal_15 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{63}\u{6f}\u{6e}\u{64}\u{69}\u{74}\u{69}\u{6f}\u{6e}\u{73}"))
(assert (= literal_17 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{6c}\u{6f}\u{73}\u{74}\u{70}\u{61}\u{73}\u{73}\u{77}\u{64}"))
(assert (= literal_18 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}"))
(assert (= literal_11 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{6c}\u{6f}\u{73}\u{74}\u{70}\u{61}\u{73}\u{73}\u{77}\u{64}\u{6d}\u{61}\u{69}\u{6c}"))
(assert (= literal_12 "\u{72}\u{65}\u{67}\u{69}\u{73}\u{74}\u{65}\u{72}\u{2d}\u{6d}\u{61}\u{69}\u{6c}"))
(assert (or (= x_25 literal_20) (= x_25 literal_19) (= x_25 literal_15) (= x_25 literal_17) (= x_25 literal_18) (= x_25 literal_11) (= x_25 literal_12)))
(assert (= x_26 (str.++ x_25 x_10)))
(assert (= literal_27 "\u{74}\u{70}\u{6c}\u{2f}"))
(assert (or (= x_33 literal_20) (= x_33 literal_19) (= x_33 literal_15) (= x_33 literal_17) (= x_33 literal_18) (= x_33 literal_11) (= x_33 x_26) (= x_33 literal_12)))
(assert (= x_34 (str.++ literal_27 x_33)))
(assert (= literal_35 "\u{2e}\u{68}\u{74}\u{6d}\u{6c}"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (str.in_re x_36 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar)))))
(check-sat)
(exit)
