(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_6 () String)
(declare-fun x_10 () String)
(declare-fun literal_7 () String)
(declare-fun x_11 () String)
(declare-fun literal_8 () String)
(declare-fun x_12 () String)
(declare-fun literal_9 () String)
(declare-fun x_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_19 () String)
(declare-fun literal_18 () String)
(declare-fun x_20 () String)
(declare-fun literal_15 () String)
(declare-fun x_21 () String)
(declare-fun literal_16 () String)
(declare-fun x_22 () String)
(declare-fun x_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_17 () String)
(declare-fun x_25 () String)
(declare-fun x_27 () String)
(declare-fun x_28 () String)
(declare-fun x_31 () String)
(declare-fun x_32 () String)
(declare-fun literal_33 () String)
(declare-fun x_37 () String)
(declare-fun x_38 () String)
(declare-fun literal_39 () String)
(declare-fun x_41 () String)
(declare-fun literal_40 () String)
(declare-fun x_42 () String)
(declare-fun x_43 () String)
(declare-fun x_44 () String)
(declare-fun literal_45 () String)
(declare-fun x_46 () String)
(assert (= literal_6 "\u{ff}fd\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{27}\u{61}\u{6c}\u{74}\u{27}\u{3e}"))
(assert (= x_10 (str.++ literal_6 sigmaStar_0)))
(assert (= literal_7 "\u{ff}fd\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{27}\u{61}\u{6c}\u{74}\u{27}\u{3e}"))
(assert (= x_11 (str.++ literal_7 sigmaStar_1)))
(assert (= literal_8 "\u{ff}fd\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{27}\u{61}\u{6c}\u{74}\u{27}\u{3e}"))
(assert (= x_12 (str.++ literal_8 sigmaStar_4)))
(assert (= literal_9 "\u{ff}fd\u{20}\u{3c}\u{73}\u{70}\u{61}\u{6e}\u{20}\u{63}\u{6c}\u{61}\u{73}\u{73}\u{3d}\u{27}\u{61}\u{6c}\u{74}\u{27}\u{3e}"))
(assert (= x_13 (str.++ literal_9 sigmaStar_2)))
(assert (= literal_14 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_19 (str.++ x_10 literal_14)))
(assert (= literal_18 ""))
(assert (= x_20 (str.++ literal_18 x_19)))
(assert (= literal_15 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_21 (str.++ x_11 literal_15)))
(assert (= literal_16 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_22 (str.++ x_12 literal_16)))
(assert (or (= x_23 x_20) (= x_23 literal_18)))
(assert (= x_24 (str.++ x_23 x_22)))
(assert (= literal_17 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_25 (str.++ x_13 literal_17)))
(assert (or (= x_27 x_20) (= x_27 literal_18) (= x_27 x_24)))
(assert (= x_28 (str.++ x_27 x_21)))
(assert (or (= x_31 x_20) (= x_31 x_28) (= x_31 literal_18) (= x_31 x_24)))
(assert (= x_32 (str.++ x_31 x_25)))
(assert (= literal_33 "\u{3c}\u{62}\u{72}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (or (= x_37 x_32) (= x_37 x_20) (= x_37 x_28) (= x_37 literal_18) (= x_37 x_24)))
(assert (= x_38 (str.++ literal_33 x_37)))
(assert (= literal_39 "\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_41 (str.++ x_38 literal_39)))
(assert (= literal_40 "\u{3c}\u{63}\u{65}\u{6e}\u{74}\u{65}\u{72}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_42 (str.++ literal_40 sigmaStar_3)))
(assert (= x_43 (str.++ x_42 x_41)))
(assert (= x_44 (str.++ x_43 sigmaStar_5)))
(assert (= literal_45 "\u{3c}\u{2f}\u{63}\u{65}\u{6e}\u{74}\u{65}\u{72}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_46 (str.++ x_44 literal_45)))
(assert (str.in_re x_46 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
