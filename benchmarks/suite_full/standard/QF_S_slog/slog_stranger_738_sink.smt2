(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_6 () String)
(declare-fun x_10 () String)
(declare-fun epsilon () String)
(declare-fun literal_9 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_15 () String)
(declare-fun literal_14 () String)
(declare-fun x_18 () String)
(declare-fun x_19 () String)
(declare-fun literal_17 () String)
(declare-fun x_20 () String)
(declare-fun x_22 () String)
(declare-fun literal_21 () String)
(declare-fun x_24 () String)
(declare-fun literal_26 () String)
(declare-fun x_27 () String)
(declare-fun literal_25 () String)
(declare-fun x_30 () String)
(declare-fun literal_31 () String)
(declare-fun x_32 () String)
(assert (= literal_6 "\u{57}\u{48}\u{45}\u{52}\u{45}\u{20}\u{28}\u{65}\u{2e}\u{75}\u{73}\u{65}\u{72}\u{69}\u{64}\u{3d}\u{27}"))
(assert (= epsilon ""))
(assert (= literal_9 "\u{75}\u{73}\u{65}\u{72}"))
(assert (or (= x_10 epsilon) (= x_10 literal_9)))
(assert (= x_12 (str.++ literal_6 x_10)))
(assert (= literal_13 "\u{27}\u{29}\u{20}"))
(assert (= x_15 (str.++ x_12 literal_13)))
(assert (= literal_14 "\u{2f}\u{65}\u{6e}\u{72}\u{6f}\u{6c}\u{2f}\u{61}\u{75}\u{74}\u{68}\u{6f}\u{72}\u{69}\u{7a}\u{65}\u{2f}\u{69}\u{6e}\u{64}\u{65}\u{78}\u{2e}\u{70}\u{68}\u{70}\u{3f}\u{75}\u{73}\u{65}\u{72}\u{3d}"))
(assert (or (= x_18 epsilon) (= x_18 literal_9)))
(assert (= x_19 (str.++ literal_14 x_18)))
(assert (= literal_17 "\u{53}\u{45}\u{4c}\u{45}\u{43}\u{54}\u{20}\u{63}\u{2e}\u{69}\u{64}\u{2c}\u{20}\u{63}\u{2e}\u{66}\u{75}\u{6c}\u{6c}\u{6e}\u{61}\u{6d}\u{65}\u{20}\u{46}\u{52}\u{4f}\u{4d}\u{20}\u{63}\u{6f}\u{75}\u{72}\u{73}\u{65}\u{20}\u{63}\u{20}\u{49}\u{4e}\u{4e}\u{45}\u{52}\u{20}\u{4a}\u{4f}\u{49}\u{4e}\u{20}\u{65}\u{6e}\u{72}\u{6f}\u{6c}\u{5f}\u{61}\u{75}\u{74}\u{68}\u{6f}\u{72}\u{69}\u{7a}\u{65}\u{20}\u{65}\u{20}\u{4f}\u{4e}\u{20}\u{63}\u{2e}\u{69}\u{64}\u{20}\u{3d}\u{20}\u{65}\u{2e}\u{63}\u{6f}\u{75}\u{72}\u{73}\u{65}\u{69}\u{64}\u{20}"))
(assert (= x_20 (str.++ literal_17 x_15)))
(assert (or (= x_22 x_20) (= x_22 literal_17)))
(assert (= literal_21 "\u{4f}\u{52}\u{44}\u{45}\u{52}\u{20}\u{42}\u{59}\u{20}\u{63}\u{2e}\u{73}\u{6f}\u{72}\u{74}\u{6f}\u{72}\u{64}\u{65}\u{72}\u{2c}\u{20}\u{63}\u{2e}\u{66}\u{75}\u{6c}\u{6c}\u{6e}\u{61}\u{6d}\u{65}"))
(assert (= x_24 (str.++ x_22 literal_21)))
(assert (= literal_26 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{73}\u{74}\u{61}\u{74}\u{75}\u{73}\u{3d}"))
(assert (= x_27 (str.++ x_19 literal_26)))
(assert (= literal_25 "\u{73}\u{74}\u{61}\u{74}\u{75}\u{73}"))
(assert (= x_30 (str.++ x_27 literal_25)))
(assert (= literal_31 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{63}\u{6f}\u{75}\u{72}\u{73}\u{65}\u{3d}"))
(assert (= x_32 (str.++ x_30 literal_31)))
(assert (str.in_re x_32 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
