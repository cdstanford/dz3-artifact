(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_3 () String)
(declare-fun x_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_6 () String)
(declare-fun x_7 () String)
(declare-fun x_9 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_12 () String)
(declare-fun x_13 () String)
(declare-fun epsilon () String)
(declare-fun x_14 () String)
(declare-fun literal_15 () String)
(declare-fun x_16 () String)
(declare-fun x_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_19 () String)
(declare-fun x_20 () String)
(declare-fun literal_21 () String)
(declare-fun x_22 () String)
(assert (= literal_3 "\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{27}\u{76}\u{69}\u{65}\u{77}\u{74}\u{68}\u{72}\u{65}\u{61}\u{64}\u{2e}\u{70}\u{68}\u{70}\u{3f}\u{66}\u{6f}\u{72}\u{75}\u{6d}\u{5f}\u{69}\u{64}\u{3d}"))
(assert (= x_4 (str.++ literal_3 sigmaStar_2)))
(assert (= literal_6 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{74}\u{68}\u{72}\u{65}\u{61}\u{64}\u{5f}\u{69}\u{64}\u{3d}"))
(assert (= x_7 (str.++ x_4 literal_6)))
(assert (or (= x_9 sigmaStar_0) (= x_9 sigmaStar_5)))
(assert (= x_10 (str.++ x_7 x_9)))
(assert (= literal_11 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{70}\u{69}\u{64}\u{3d}"))
(assert (= x_12 (str.++ x_10 literal_11)))
(assert (= epsilon ""))
(assert (= x_13 epsilon))
(assert (= x_14 (str.++ x_12 x_13)))
(assert (= literal_15 "\u{23}\u{70}\u{6f}\u{73}\u{74}\u{5f}"))
(assert (= x_16 (str.++ x_14 literal_15)))
(assert (= x_17 (str.++ x_16 x_13)))
(assert (= literal_18 "\u{27}\u{3e}"))
(assert (= x_19 (str.++ x_17 literal_18)))
(assert (= x_20 (str.++ x_19 sigmaStar_1)))
(assert (= literal_21 "\u{3c}\u{2f}\u{61}\u{3e}\u{20}\u{7c}\u{5c}\u{6e}"))
(assert (= x_22 (str.++ x_20 literal_21)))
(assert (str.in_re x_22 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
