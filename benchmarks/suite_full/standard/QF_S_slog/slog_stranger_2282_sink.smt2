(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun x_10 () String)
(declare-fun epsilon () String)
(declare-fun literal_6 () String)
(declare-fun literal_7 () String)
(declare-fun literal_4 () String)
(declare-fun literal_13 () String)
(declare-fun x_17 () String)
(declare-fun literal_11 () String)
(declare-fun x_19 () String)
(declare-fun literal_18 () String)
(declare-fun x_23 () String)
(declare-fun literal_12 () String)
(declare-fun x_20 () String)
(declare-fun x_24 () String)
(declare-fun x_21 () String)
(declare-fun x_25 () String)
(declare-fun literal_14 () String)
(declare-fun x_22 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_31 () String)
(declare-fun literal_28 () String)
(declare-fun x_32 () String)
(declare-fun literal_29 () String)
(declare-fun x_33 () String)
(declare-fun literal_30 () String)
(declare-fun x_34 () String)
(declare-fun x_37 () String)
(declare-fun x_38 () String)
(declare-fun x_39 () String)
(declare-fun x_43 () String)
(declare-fun literal_36 () String)
(declare-fun x_44 () String)
(declare-fun x_51 () String)
(declare-fun literal_46 () String)
(declare-fun x_53 () String)
(declare-fun literal_45 () String)
(declare-fun x_54 () String)
(declare-fun literal_52 () String)
(declare-fun x_55 () String)
(declare-fun literal_57 () String)
(declare-fun x_56 () String)
(declare-fun x_59 () String)
(declare-fun literal_60 () String)
(declare-fun x_61 () String)
(declare-fun literal_58 () String)
(declare-fun x_63 () String)
(declare-fun sigmaStar_65 () String)
(declare-fun literal_64 () String)
(declare-fun x_66 () String)
(declare-fun x_67 () String)
(declare-fun literal_68 () String)
(declare-fun x_69 () String)
(assert (= epsilon ""))
(assert (= literal_6 "\u{66}\u{69}\u{6c}\u{74}\u{65}\u{72}\u{73}\u{65}\u{6c}\u{65}\u{63}\u{74}"))
(assert (= literal_7 ""))
(assert (= literal_4 "\u{75}\u{73}\u{65}\u{72}\u{69}\u{64}"))
(assert (or (= x_10 epsilon) (= x_10 literal_6) (= x_10 literal_7) (= x_10 literal_4)))
(assert (= literal_13 "\u{2f}"))
(assert (= x_17 (str.++ x_10 literal_13)))
(assert (= literal_11 "\u{2f}"))
(assert (= literal_18 "\u{31}"))
(assert (or (= x_19 epsilon) (= x_19 literal_18)))
(assert (= x_23 (str.++ literal_11 x_19)))
(assert (= literal_12 "\u{2f}"))
(assert (or (= x_20 epsilon) (= x_20 literal_18)))
(assert (= x_24 (str.++ literal_12 x_20)))
(assert (or (= x_21 epsilon) (= x_21 literal_18)))
(assert (= x_25 (str.++ x_17 x_21)))
(assert (= literal_14 "\u{2f}"))
(assert (or (= x_22 epsilon) (= x_22 literal_18)))
(assert (= x_26 (str.++ literal_14 x_22)))
(assert (= literal_27 "\u{2f}\u{62}\u{6c}\u{6f}\u{67}\u{2f}\u{67}\u{72}\u{6f}\u{75}\u{70}\u{2f}"))
(assert (= x_31 (str.++ x_23 literal_27)))
(assert (= literal_28 "\u{2f}\u{62}\u{6c}\u{6f}\u{67}\u{2f}\u{73}\u{69}\u{74}\u{65}\u{2f}"))
(assert (= x_32 (str.++ x_24 literal_28)))
(assert (= literal_29 "\u{2f}\u{62}\u{6c}\u{6f}\u{67}\u{2f}\u{63}\u{6f}\u{75}\u{72}\u{73}\u{65}\u{2f}"))
(assert (= x_33 (str.++ x_25 literal_29)))
(assert (= literal_30 "\u{2f}\u{62}\u{6c}\u{6f}\u{67}\u{2f}\u{75}\u{73}\u{65}\u{72}\u{2f}"))
(assert (= x_34 (str.++ x_26 literal_30)))
(assert (= x_37 (str.++ x_31 x_10)))
(assert (= x_38 (str.++ x_33 x_10)))
(assert (= x_39 (str.++ x_34 x_10)))
(assert (or (= x_43 epsilon) (= x_43 x_32) (= x_43 x_39) (= x_43 x_38) (= x_43 x_37)))
(assert (= literal_36 "\u{2f}\u{74}\u{61}\u{67}"))
(assert (= x_44 (str.++ x_43 literal_36)))
(assert (or (= x_51 x_44) (= x_51 epsilon) (= x_51 x_32) (= x_51 x_39) (= x_51 x_38) (= x_51 x_37)))
(assert (= literal_46 "\u{2f}\u{72}\u{73}\u{73}\u{2e}\u{78}\u{6d}\u{6c}"))
(assert (= x_53 (str.++ x_51 literal_46)))
(assert (= literal_45 "\u{2f}\u{72}\u{73}\u{73}\u{2f}\u{66}\u{69}\u{6c}\u{65}\u{2e}\u{70}\u{68}\u{70}\u{3f}\u{66}\u{69}\u{6c}\u{65}\u{3d}"))
(assert (= x_54 (str.++ literal_45 x_53)))
(assert (= literal_52 "\u{2f}\u{72}\u{73}\u{73}\u{2f}\u{66}\u{69}\u{6c}\u{65}\u{2e}\u{70}\u{68}\u{70}\u{2f}"))
(assert (= x_55 (str.++ literal_52 x_53)))
(assert (= literal_57 "\u{3c}\u{64}\u{69}\u{76}\u{20}\u{61}\u{6c}\u{69}\u{67}\u{6e}\u{3d}\u{22}\u{72}\u{69}\u{67}\u{68}\u{74}\u{22}\u{3e}\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{22}"))
(assert (or (= x_56 x_55) (= x_56 x_54)))
(assert (= x_59 (str.++ literal_57 x_56)))
(assert (= literal_60 "\u{22}\u{3e}\u{3c}\u{69}\u{6d}\u{67}\u{20}\u{73}\u{72}\u{63}\u{3d}\u{22}"))
(assert (= x_61 (str.++ x_59 literal_60)))
(assert (= literal_58 "\u{2f}\u{69}\u{2f}\u{72}\u{73}\u{73}\u{2e}\u{67}\u{69}\u{66}"))
(assert (= x_63 (str.++ x_61 literal_58)))
(assert (= literal_64 "\u{22}\u{20}\u{74}\u{69}\u{74}\u{6c}\u{65}\u{3d}\u{22}"))
(assert (= x_66 (str.++ x_63 literal_64)))
(assert (= x_67 (str.++ x_66 sigmaStar_65)))
(assert (= literal_68 "\u{22}\u{20}\u{61}\u{6c}\u{74}\u{3d}\u{22}\u{22}\u{20}\u{2f}\u{3e}\u{3c}\u{2f}\u{61}\u{3e}\u{3c}\u{2f}\u{64}\u{69}\u{76}\u{3e}"))
(assert (= x_69 (str.++ x_67 literal_68)))
(assert (str.in_re x_69 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
