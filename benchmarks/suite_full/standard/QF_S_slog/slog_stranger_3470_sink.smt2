(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun sigmaStar_12 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun sigmaStar_14 () String)
(declare-fun literal_20 () String)
(declare-fun x_26 () String)
(declare-fun literal_25 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_35 () String)
(declare-fun literal_30 () String)
(declare-fun x_41 () String)
(declare-fun literal_31 () String)
(declare-fun x_42 () String)
(declare-fun literal_32 () String)
(declare-fun x_43 () String)
(declare-fun literal_33 () String)
(declare-fun x_44 () String)
(declare-fun literal_34 () String)
(declare-fun x_45 () String)
(declare-fun literal_46 () String)
(declare-fun x_51 () String)
(declare-fun sigmaStar_52 () String)
(declare-fun sigmaStar_53 () String)
(declare-fun x_54 () String)
(declare-fun literal_47 () String)
(declare-fun x_55 () String)
(declare-fun literal_48 () String)
(declare-fun x_56 () String)
(declare-fun literal_49 () String)
(declare-fun x_57 () String)
(declare-fun literal_50 () String)
(declare-fun x_58 () String)
(declare-fun literal_69 () String)
(declare-fun x_68 () String)
(declare-fun x_70 () String)
(declare-fun literal_71 () String)
(declare-fun x_72 () String)
(assert (= literal_20 "\u{42}\u{79}\u{74}\u{65}\u{73}"))
(assert (= x_26 (str.++ sigmaStar_12 literal_20)))
(assert (= literal_25 "\u{3c}\u{62}\u{3e}"))
(assert (= x_27 (str.++ literal_25 sigmaStar_3)))
(assert (= literal_28 "\u{3c}\u{62}\u{3e}"))
(assert (= x_35 (str.++ literal_28 sigmaStar_9)))
(assert (= literal_30 "\u{3c}\u{2f}\u{62}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_41 (str.++ x_27 literal_30)))
(assert (= literal_31 "\u{3c}\u{62}\u{3e}"))
(assert (= x_42 (str.++ literal_31 sigmaStar_6)))
(assert (= literal_32 "\u{3c}\u{62}\u{3e}"))
(assert (= x_43 (str.++ literal_32 sigmaStar_5)))
(assert (= literal_33 "\u{3c}\u{62}\u{3e}"))
(assert (= x_44 (str.++ literal_33 sigmaStar_7)))
(assert (= literal_34 "\u{3c}\u{62}\u{3e}"))
(assert (= x_45 (str.++ literal_34 sigmaStar_2)))
(assert (= literal_46 "\u{3c}\u{2f}\u{62}\u{3e}\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}"))
(assert (= x_51 (str.++ x_35 literal_46)))
(assert (= x_54 (str.++ x_41 sigmaStar_11)))
(assert (= literal_47 "\u{3c}\u{2f}\u{62}\u{3e}"))
(assert (= x_55 (str.++ x_42 literal_47)))
(assert (= literal_48 "\u{3c}\u{2f}\u{62}\u{3e}"))
(assert (= x_56 (str.++ x_43 literal_48)))
(assert (= literal_49 "\u{3c}\u{2f}\u{62}\u{3e}"))
(assert (= x_57 (str.++ x_44 literal_49)))
(assert (= literal_50 "\u{3c}\u{2f}\u{62}\u{3e}"))
(assert (= x_58 (str.++ x_45 literal_50)))
(assert (= literal_69 "\u{3c}\u{64}\u{69}\u{76}\u{20}\u{61}\u{6c}\u{69}\u{67}\u{6e}\u{3d}\u{27}\u{63}\u{65}\u{6e}\u{74}\u{65}\u{72}\u{27}\u{3e}"))
(assert (or (= x_68 x_55) (= x_68 x_54) (= x_68 sigmaStar_8) (= x_68 x_51) (= x_68 sigmaStar_53) (= x_68 sigmaStar_52) (= x_68 sigmaStar_0) (= x_68 x_58) (= x_68 x_57) (= x_68 sigmaStar_4) (= x_68 x_56)))
(assert (= x_70 (str.++ literal_69 x_68)))
(assert (= literal_71 "\u{3c}\u{2f}\u{64}\u{69}\u{76}\u{3e}\u{5c}\u{6e}"))
(assert (= x_72 (str.++ x_70 literal_71)))
(assert (str.in_re x_72 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
