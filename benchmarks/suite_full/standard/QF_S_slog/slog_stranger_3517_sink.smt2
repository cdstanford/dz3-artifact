(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_13 () String)
(declare-fun literal_15 () String)
(declare-fun x_14 () String)
(declare-fun x_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_18 () String)
(declare-fun literal_19 () String)
(declare-fun x_20 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_24 () String)
(declare-fun literal_23 () String)
(declare-fun x_25 () String)
(declare-fun x_27 () String)
(declare-fun literal_26 () String)
(declare-fun x_28 () String)
(assert (= literal_12 "\u{3f}\u{61}\u{69}\u{64}\u{3d}"))
(assert (= x_13 (str.++ literal_12 sigmaStar_11)))
(assert (= literal_15 "\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{27}\u{69}\u{6e}\u{64}\u{65}\u{78}\u{2e}\u{70}\u{68}\u{70}"))
(assert (or (= x_14 sigmaStar_0) (= x_14 x_13)))
(assert (= x_16 (str.++ literal_15 x_14)))
(assert (= literal_17 "\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{70}\u{61}\u{67}\u{65}\u{6e}\u{75}\u{6d}\u{3d}\u{32}\u{27}\u{3e}"))
(assert (= x_18 (str.++ x_16 literal_17)))
(assert (= literal_19 "\u{3c}\u{62}\u{3e}"))
(assert (= x_20 (str.++ literal_19 sigmaStar_3)))
(assert (= x_21 (str.++ x_18 sigmaStar_2)))
(assert (= literal_22 "\u{3c}\u{2f}\u{62}\u{3e}"))
(assert (= x_24 (str.++ x_20 literal_22)))
(assert (= literal_23 "\u{3c}\u{2f}\u{61}\u{3e}"))
(assert (= x_25 (str.++ x_21 literal_23)))
(assert (or (= x_27 x_25) (= x_27 x_24)))
(assert (= literal_26 "\u{3c}\u{2f}\u{73}\u{70}\u{61}\u{6e}\u{3e}\u{3c}\u{2f}\u{74}\u{64}\u{3e}\u{5c}\u{6e}"))
(assert (= x_28 (str.++ x_27 literal_26)))
(assert (str.in_re x_28 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
