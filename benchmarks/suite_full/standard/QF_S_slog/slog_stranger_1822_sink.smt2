(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun literal_11 () String)
(declare-fun x_10 () String)
(declare-fun x_12 () String)
(declare-fun sigmaStar_42 () String)
(declare-fun sigmaStar_46 () String)
(declare-fun literal_32 () String)
(declare-fun literal_39 () String)
(declare-fun x_49 () String)
(declare-fun literal_44 () String)
(declare-fun x_50 () String)
(declare-fun literal_45 () String)
(declare-fun x_51 () String)
(declare-fun literal_48 () String)
(declare-fun x_52 () String)
(declare-fun x_47 () String)
(declare-fun x_54 () String)
(declare-fun literal_55 () String)
(declare-fun x_60 () String)
(declare-fun epsilon () String)
(declare-fun literal_53 () String)
(declare-fun x_61 () String)
(declare-fun literal_62 () String)
(declare-fun x_63 () String)
(declare-fun literal_64 () String)
(declare-fun x_65 () String)
(assert (= literal_11 "\u{5c}\u{4c}\u{61}\u{72}\u{67}\u{65}\u{20}"))
(assert (= x_10 sigmaStar_8))
(assert (= x_12 (str.++ literal_11 x_10)))
(assert (= literal_32 "\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{65}\u{78}\u{65}"))
(assert (= x_47 (str.replace literal_32 "\u{20}" "\u{5e}\u{20}")))
(assert (= literal_39 "\u{20}\u{2b}\u{2b}\u{20}\u{2d}\u{65}\u{20}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}"))
(assert (= x_49 (str.++ literal_39 sigmaStar_42)))
(assert (= literal_44 "\u{5c}\u{22}\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{64}\u{61}\u{72}\u{77}\u{69}\u{6e}\u{5c}\u{22}\u{20}\u{2d}\u{65}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}"))
(assert (= x_50 (str.++ literal_44 sigmaStar_42)))
(assert (= literal_45 "\u{5c}\u{22}\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{6c}\u{69}\u{6e}\u{75}\u{78}\u{5c}\u{22}\u{20}\u{2d}\u{65}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}"))
(assert (= x_51 (str.++ literal_45 sigmaStar_42)))
(assert (= literal_48 "\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{20}\u{2d}\u{65}\u{20}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{20}"))
(assert (= x_52 (str.++ literal_48 sigmaStar_42)))
(assert (= x_54 (str.++ x_47 x_49)))
(assert (= literal_55 "\u{54}\u{68}\u{65}\u{20}\u{73}\u{68}\u{65}\u{6c}\u{6c}\u{20}\u{63}\u{6f}\u{6d}\u{6d}\u{61}\u{6e}\u{64}\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}"))
(assert (= epsilon ""))
(assert (= literal_53 ""))
(assert (or (= x_60 epsilon) (= x_60 x_54) (= x_60 literal_53) (= x_60 x_52) (= x_60 x_51) (= x_60 x_50)))
(assert (= x_61 (str.++ literal_55 x_60)))
(assert (= literal_62 "\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}\u{72}\u{65}\u{74}\u{75}\u{72}\u{6e}\u{65}\u{64}\u{20}\u{73}\u{74}\u{61}\u{74}\u{75}\u{73}\u{20}\u{3d}\u{20}"))
(assert (= x_63 (str.++ x_61 literal_62)))
(assert (= literal_64 "\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}\u{5c}\u{6e}"))
(assert (= x_65 (str.++ x_63 literal_64)))
(assert (str.in_re x_65 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
