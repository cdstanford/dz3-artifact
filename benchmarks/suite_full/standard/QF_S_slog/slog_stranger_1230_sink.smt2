(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun literal_20 () String)
(declare-fun x_21 () String)
(declare-fun literal_19 () String)
(declare-fun literal_17 () String)
(declare-fun x_22 () String)
(declare-fun literal_25 () String)
(declare-fun x_26 () String)
(declare-fun literal_24 () String)
(declare-fun x_23 () String)
(declare-fun epsilon () String)
(declare-fun literal_13 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_29 () String)
(declare-fun literal_30 () String)
(declare-fun x_32 () String)
(declare-fun x_33 () String)
(declare-fun literal_31 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(declare-fun sigmaStar_39 () String)
(declare-fun x_38 () String)
(assert (= literal_20 "\u{53}\u{45}\u{4c}\u{45}\u{43}\u{54}\u{20}\u{75}\u{2e}\u{69}\u{64}\u{2c}\u{20}\u{75}\u{2e}\u{75}\u{73}\u{65}\u{72}\u{6e}\u{61}\u{6d}\u{65}\u{2c}\u{20}\u{75}\u{2e}\u{66}\u{69}\u{72}\u{73}\u{74}\u{6e}\u{61}\u{6d}\u{65}\u{2c}\u{20}\u{75}\u{2e}\u{6c}\u{61}\u{73}\u{74}\u{6e}\u{61}\u{6d}\u{65}\u{2c}\u{20}\u{75}\u{2e}\u{6d}\u{61}\u{69}\u{6c}\u{64}\u{69}\u{73}\u{70}\u{6c}\u{61}\u{79}\u{2c}\u{20}\u{75}\u{2e}\u{6d}\u{61}\u{69}\u{6c}\u{66}\u{6f}\u{72}\u{6d}\u{61}\u{74}\u{2c}\u{20}\u{75}\u{2e}\u{6d}\u{61}\u{69}\u{6c}\u{64}\u{69}\u{67}\u{65}\u{73}\u{74}\u{2c}\u{20}\u{75}\u{2e}\u{65}\u{6d}\u{61}\u{69}\u{6c}\u{73}\u{74}\u{6f}\u{70}\u{2c}\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{75}\u{2e}\u{65}\u{6d}\u{61}\u{69}\u{6c}\u{2c}\u{20}\u{75}\u{2e}\u{63}\u{69}\u{74}\u{79}\u{2c}\u{20}\u{75}\u{2e}\u{63}\u{6f}\u{75}\u{6e}\u{74}\u{72}\u{79}\u{2c}\u{20}\u{75}\u{2e}\u{6c}\u{61}\u{73}\u{74}\u{61}\u{63}\u{63}\u{65}\u{73}\u{73}\u{2c}\u{20}\u{75}\u{2e}\u{6c}\u{61}\u{73}\u{74}\u{6c}\u{6f}\u{67}\u{69}\u{6e}\u{2c}\u{20}\u{75}\u{2e}\u{70}\u{69}\u{63}\u{74}\u{75}\u{72}\u{65}\u{2c}\u{20}\u{75}\u{2e}\u{74}\u{69}\u{6d}\u{65}\u{7a}\u{6f}\u{6e}\u{65}\u{2c}\u{20}\u{75}\u{2e}\u{6c}\u{61}\u{6e}\u{67}\u{2c}\u{20}\u{75}\u{2e}\u{74}\u{72}\u{61}\u{63}\u{6b}\u{66}\u{6f}\u{72}\u{75}\u{6d}\u{73}\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{46}\u{52}\u{4f}\u{4d}\u{20}\u{75}\u{73}\u{65}\u{72}\u{20}\u{75}\u{2c}\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{66}\u{6f}\u{72}\u{75}\u{6d}\u{5f}\u{73}\u{75}\u{62}\u{73}\u{63}\u{72}\u{69}\u{70}\u{74}\u{69}\u{6f}\u{6e}\u{73}\u{20}\u{73}\u{20}"))
(assert (= literal_19 ""))
(assert (= literal_17 "\u{2c}\u{20}\u{67}\u{72}\u{6f}\u{75}\u{70}\u{73}\u{5f}\u{6d}\u{65}\u{6d}\u{62}\u{65}\u{72}\u{73}\u{20}\u{67}"))
(assert (or (= x_21 literal_19) (= x_21 literal_17)))
(assert (= x_22 (str.++ literal_20 x_21)))
(assert (= literal_25 "\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{57}\u{48}\u{45}\u{52}\u{45}\u{20}\u{73}\u{2e}\u{66}\u{6f}\u{72}\u{75}\u{6d}\u{20}\u{3d}\u{20}\u{27}"))
(assert (= x_26 (str.++ x_22 literal_25)))
(assert (= literal_24 "\u{20}\u{41}\u{4e}\u{44}\u{20}\u{67}\u{2e}\u{67}\u{72}\u{6f}\u{75}\u{70}\u{69}\u{64}\u{20}\u{3d}\u{20}\u{27}"))
(assert (= epsilon ""))
(assert (= literal_13 "\u{63}\u{6f}\u{75}\u{72}\u{73}\u{65}"))
(assert (or (= x_23 epsilon) (= x_23 literal_13)))
(assert (= x_27 (str.++ literal_24 x_23)))
(assert (= literal_28 "\u{27}\u{20}\u{41}\u{4e}\u{44}\u{20}\u{75}\u{2e}\u{69}\u{64}\u{20}\u{3d}\u{20}\u{67}\u{2e}\u{75}\u{73}\u{65}\u{72}\u{69}\u{64}"))
(assert (= x_29 (str.++ x_27 literal_28)))
(assert (= literal_30 "\u{27}\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{41}\u{4e}\u{44}\u{20}\u{73}\u{2e}\u{75}\u{73}\u{65}\u{72}\u{69}\u{64}\u{20}\u{3d}\u{20}\u{75}\u{2e}\u{69}\u{64}\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{41}\u{4e}\u{44}\u{20}\u{75}\u{2e}\u{64}\u{65}\u{6c}\u{65}\u{74}\u{65}\u{64}\u{20}\u{3c}\u{3e}\u{20}\u{31}\u{20}\u{20}"))
(assert (= x_32 (str.++ x_26 literal_30)))
(assert (= literal_31 ""))
(assert (or (= x_33 literal_31) (= x_33 x_29)))
(assert (= x_34 (str.++ x_32 x_33)))
(assert (= literal_35 "\u{0d}\u{0a}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{20}\u{4f}\u{52}\u{44}\u{45}\u{52}\u{20}\u{42}\u{59}\u{20}\u{75}\u{2e}\u{65}\u{6d}\u{61}\u{69}\u{6c}\u{20}\u{41}\u{53}\u{43}"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (or (= x_38 epsilon) (= x_38 x_36)))
(assert (str.in_re x_38 (re.++ (re.* re.allchar) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar)))))
(check-sat)
(exit)
